generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "neutral"
  ignoreEnums               = true
  includeRelationFromFields = true
}

model Admins {
  id             Int              @id @default(autoincrement())
  username       String?
  email          String
  role           ROLE
  password       String
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @updatedAt @db.Timestamp(0)
  Blogs          Blogs[]
  Contests       Contests[]
  ContestWinners ContestWinners[]
}

model Users {
  id                 Int                  @id @default(autoincrement())
  fullName           String?
  username           String               @unique
  email              String               @unique
  profilePictureURL  String?
  coverPhotoURL      String?
  address            String?
  about              String?
  createdAt          DateTime             @default(now()) @db.Timestamp(0)
  updatedAt          DateTime             @updatedAt @db.Timestamp(0)
  Authentication     Authentication?
  Subscriptions      Subscriptions[]
  BlogReviews        BlogReviews[]
  Books              Books[]
  BookRatings        BookRatings[]
  Invoices           Invoices[]
  ReportedBooks      ReportedBooks[]
  Bookmarks          UserBookmarks[]
  History            UserHistory[]
  UserWallet         UserWallet[]
  Supporting         UserSupport[]        @relation("supporting")
  Supported          UserSupport[]        @relation("supported")
  BookChapterRatings BookChapterRatings[]
}

model Authentication {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  isEmailVerified Boolean  @default(false)
  password        String?
  provider        String?
  emailOtp        String?
  isBlocked       Boolean  @default(false)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)
  User            Users    @relation(fields: [userId], references: [id])
}

model Subscriptions {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  stripeId           String?             @unique
  subscriptionId     String?             @unique
  customerId         String?             @unique
  subscriptionStatus SUBSCRIPTION_STATUS
  amountInCents      Int
  createdAt          DateTime            @default(now()) @db.Timestamp(0)
  User               Users               @relation(fields: [userId], references: [id])
}

model Blogs {
  id               Int           @id @default(autoincrement())
  authorId         Int
  title            String
  bannerURL        String?
  shortDescription String?
  content          String
  views            Int           @default(0)
  createdAt        DateTime      @default(now()) @db.Timestamp(0)
  updatedAt        DateTime      @updatedAt @db.Timestamp(0)
  Author           Admins        @relation(fields: [authorId], references: [id])
  Reviews          BlogReviews[]
}

model BlogReviews {
  id      Int     @id @default(autoincrement())
  blogId  Int
  userId  Int
  rating  Int
  comment String?
  Blog    Blogs?  @relation(fields: [blogId], references: [id])
  User    Users?  @relation(fields: [userId], references: [id])
}

model Genres {
  id            Int             @id @default(autoincrement())
  name          String
  BookGenres    BookGenres[]
  ContestGenres ContestGenres[]
}

model Books {
  id             Int              @id @default(autoincrement())
  authorId       Int
  category       BOOK_CATEGORY
  coverPageURL   String
  title          String
  synopsis       String?
  ageRating      Int
  type           BOOK_TYPE
  canonSource    String
  isCompleted    Boolean          @default(false)
  views          Int              @default(0)
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @updatedAt @db.Timestamp(0)
  Author         Users            @relation(fields: [authorId], references: [id])
  Genres         BookGenres[]
  Tags           BookTags[]
  Ratings        BookRatings[]
  Chapters       BookChapters[]
  ReportedBooks  ReportedBooks[]
  UserBookmarks  UserBookmarks[]
  UserHistory    UserHistory[]
  ContestBooks   ContestBooks[]
  ContestWinners ContestWinners[]
}

model BookGenres {
  id      Int     @id @default(autoincrement())
  genreId Int
  bookId  Int
  Book    Books?  @relation(fields: [bookId], references: [id])
  Genre   Genres? @relation(fields: [genreId], references: [id])
}

model BookTags {
  id     Int    @id @default(autoincrement())
  bookId Int
  tag    String
  Book   Books? @relation(fields: [bookId], references: [id])
}

model BookRatings {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  User      Users    @relation(fields: [userId], references: [id])
  Book      Books    @relation(fields: [bookId], references: [id])
}

model BookChapters {
  id          Int                  @id @default(autoincrement())
  bookId      Int
  name        String
  content     String[]
  views       Int
  isPublished Boolean              @default(true)
  isLocked    Boolean              @default(false)
  orderNumber Int
  createdAt   DateTime             @default(now()) @db.Timestamp(0)
  updatedAt   DateTime             @updatedAt @db.Timestamp(0)
  Book        Books                @relation(fields: [bookId], references: [id])
  Ratings     BookChapterRatings[]
}

model BookChapterRatings {
  id        Int          @id @default(autoincrement())
  chapterId Int
  userId    Int
  rating    Float
  comment   String?
  createdAt DateTime     @default(now()) @db.Timestamp(0)
  Chapter   BookChapters @relation(fields: [chapterId], references: [id])
  User      Users        @relation(fields: [userId], references: [id])
}

model ReportedBooks {
  id        Int      @id @default(autoincrement())
  bookId    Int
  userId    Int
  reason    String
  message   String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  User      Users    @relation(fields: [userId], references: [id])
  Book      Books    @relation(fields: [bookId], references: [id])
}

model Invoices {
  id              Int      @id @default(autoincrement())
  userId          Int
  invoiceId       String
  amountInCents   Int
  invoiceURL      String
  nextPaymentDate DateTime
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  User            Users    @relation(fields: [userId], references: [id])
}

model UserSupport {
  id               Int      @id @default(autoincrement())
  supportingUserId Int
  supportedUserId  Int
  createdAt        DateTime @default(now())
  SupportingUser   Users    @relation("supporting", fields: [supportingUserId], references: [id])
  SupportedUser    Users    @relation("supported", fields: [supportedUserId], references: [id])
}

model UserBookmarks {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  User      Users    @relation(fields: [userId], references: [id])
  Book      Books    @relation(fields: [bookId], references: [id])
}

model UserHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  User      Users    @relation(fields: [userId], references: [id])
  Book      Books    @relation(fields: [bookId], references: [id])
}

model UserWallet {
  id              Int              @id @default(autoincrement())
  userId          Int
  amount          Float
  transactionType TRANSACTION_TYPE
  User            Users            @relation(fields: [userId], references: [id])
}

model Contests {
  id             Int              @id @default(autoincrement())
  title          String
  coverPhoto     String
  startDate      DateTime
  endDate        DateTime
  isCompleted    Boolean          @default(false)
  rules          String?
  createdBy      Int
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @updatedAt @db.Timestamp(0)
  ContestGenres  ContestGenres[]
  ContestBooks   ContestBooks[]
  ContestWinners ContestWinners[]
  Creator        Admins           @relation(fields: [createdBy], references: [id])
}

model ContestGenres {
  id        Int      @id @default(autoincrement())
  contestId Int
  genreId   Int
  Genre     Genres   @relation(fields: [genreId], references: [id])
  Contest   Contests @relation(fields: [contestId], references: [id])
}

model ContestBooks {
  id        Int      @id @default(autoincrement())
  contestId Int
  bookId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  Contest   Contests @relation(fields: [contestId], references: [id])
  Book      Books    @relation(fields: [bookId], references: [id])
}

model ContestWinners {
  id         Int              @id @default(autoincrement())
  contestId  Int
  bookId     Int
  position   WINNER_POSITIONS @default(first)
  selectedBy Int
  createdAt  DateTime         @default(now()) @db.Timestamp(0)
  Contest    Contests         @relation(fields: [contestId], references: [id])
  Book       Books            @relation(fields: [bookId], references: [id])
  Selector   Admins           @relation(fields: [selectedBy], references: [id])
}

enum ROLE {
  superAdmin
  admin
}

enum TRANSACTION_TYPE {
  credit
  debit
}

enum SUBSCRIPTION_STATUS {
  active
  paused
  inactive
}

enum BOOK_CATEGORY {
  novel
  comic
}

enum BOOK_TYPE {
  original
  fan_fiction
}

enum WINNER_POSITIONS {
  first
  second
  third
}
